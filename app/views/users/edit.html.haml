-# Note: this view can be seen by the user himself or by an admin.
-#   It will behave differently in each case.

- if current_user == @user
  - title = t('.title')
- else
  - title = t('.other_user.title')
= page_title title

= content_for :sidebar do
  .sidebar-title= title

  = render 'shared/user_card', user: @user, editing: true

  - if current_user == @user
    #user-cancel-account
      = link_to t('.cancel_account'), disable_user_path(current_user), data: { confirm: t("are_you_sure") }, method: :delete, class: 'btn btn-danger btn-sm'

- unless @user.confirmed?
  #user-not-confirmed.alert.alert-warning
    - if current_user == @user
      = t('.not_confirmed', :url => new_user_confirmation_path).html_safe
    - else
      = t('.other_user.not_confirmed')

- if current_user == @user
  - if user_signed_in_via_federation?
    .alert.alert-gray
      %p= t('.federated.title')
      - unless @shib_provider.blank?
        %span= t('.federated.your_idp', idp: @shib_provider)
      %p= link_to t('.federated.see_your_data'), shibboleth_info_path, class: 'open-modal'
  - if user_signed_in_via_ldap?
    .alert.alert-gray
      %p= t('.ldap.title')

#user-account-panel-1

  = simple_form_for @user, url: user_path(@user) do |f|
    #user-account-info
      %h3= t('.account_info')
      = f.input :email, :required => false, :disabled => true
      = f.input :username, :required => false, :disabled => true
      - if can?(:update_password, @user)
        - unless current_user.superuser?
          = f.input :current_password
        = disable_autocomplete_for('user[password]', 'password')
        = f.input :password, autocomplete: "off", required: false
        = f.input :password_confirmation, required: false

    #user-address
      %h3= t('.address')
      = f.simple_fields_for :profile do |p|
        = p.input :address
        = p.input :city
        = p.input :province
        = p.input :country, as: :string
        = p.input :zipcode
        = p.input :phone
      = f.input :timezone, required: false do
        = f.collection_select :timezone, Mconf::DSTTimezone.all, :name, :dst_string, { include_blank: true }, { class: 'form-control' }

    = f.button :wrapped, value: t("_other.save")


#user-account-panel-2

  #user-profile
    %h3
      = t('.public_profile')
      = icon_info t('.public_profile_tip')
    = simple_form_for @user, url: user_path(@user) do |f|
      = f.simple_fields_for :profile do |p|
        = p.input :full_name, :required => true, :disabled => !can?(:update_full_name, @user.profile)
        = p.input :organization
        = p.input :description, as: :text
        = p.input :url
      = f.button :wrapped, value: t("_other.save")

  - if user_signed_in? && current_user.superuser
    #user-management-options.alert.alert-gray
      = simple_form_for @user, url: user_path(@user) do |f|
        %h3= t('.management_options')
        = f.input :can_record, :required => false

        -# prevent admins from mistakenly removing themselves from being admins or blocking
        -# access to their account
        - unless current_user == @user
          = f.input :approved, :required => false
          = f.input :superuser, as: :boolean, required: false
          - if !@user.confirmed?
            .input
              = link_to confirm_user_path(@user), :data => { :confirm => t('.confirm_user_confirm') },  :method => :post do
                = icon_confirm_user(:alt => t('.confirm_user'))
                = t('.confirm_user')
          .input
            = link_to disable_user_path(@user), :data => { :confirm => t('.disable_confirm') }, :method => :delete do
              = icon_disable(:alt => t('.disable'))
              = t('.disable')

        = f.button :wrapped, value: t("_other.save")
